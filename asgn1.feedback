"--> Running asgn1.test.01 (GET a zero sized file) ... SUCCESS!
--> Running asgn1.test.02 (GET a small text file) ... SUCCESS!
--> Running asgn1.test.03 (GET a small binary file (with __-- in the name)) ... SUCCESS!
--> Running asgn1.test.04 (GET a large text file) ... SUCCESS!
--> Running asgn1.test.05 (GET a large binary file) ... SUCCESS!
--> Running asgn1.test.06 (PUT a small text file) ... SUCCESS!
--> Running asgn1.test.07 (PUT a small binary file) ... unknown exception ... failure!
++++ First 200 characters of standard error for test asgn1.test.07 are: ++++
'utf-8' codec can't decode byte 0x80 in position 152: invalid start byte
Most likely what is happening is that the main program is printing binary data out. Another possible cause for this is that the result of the diff on binary files produced output that printed to stderr. In the case of the latter, this means the program also failed this test.
++++ end ++++
---- Test feedback ----
Create a small binary file from /dev/urandom on the client side. Send a request using curl to PUT (-T) the contents of the file with a valid name on the server side. Compare the original file and the file created by the server with diff.
---- end ----
--> Running asgn1.test.08 (PUT a large binary file) ... unknown exception ... failure!
++++ First 200 characters of standard error for test asgn1.test.08 are: ++++
'utf-8' codec can't decode byte 0xf2 in position 145: invalid continuation byte
Most likely what is happening is that the main program is printing binary data out. Another possible cause for this is that the result of the diff on binary files produced output that printed to stderr. In the case of the latter, this means the program also failed this test.
++++ end ++++
---- Test feedback ----
Create a large binary file (> 32KiB) from /dev/urandom on the client side. Send a request using curl to PUT (-T) the contents of the file with a valid name on the server side. Compare the original file and the file created by the server with diff.
---- end ----
--> Running asgn1.test.09 (Test HEAD request for a proper response header with 200 (OK)) ... SUCCESS!
--> Running asgn1.test.10 (Test if PUT requests receive response code 201 (Created) in response header) ... SUCCESS!
--> Running asgn1.test.11 (Test for 400 error on bad resource (request-target) name) ... SUCCESS!
--> Running asgn1.test.13 (Test for 404 error for resource that doesn't exist) ... SUCCESS!
--> Running asgn1.test.14 (PUT a zero sized file) ... SUCCESS!
--> Running asgn1.test.15 (PUT a file with only null bytes in its contents) ... SUCCESS!
--> Running asgn1.test.16 (GET a file with only null bytes in its contents) ... SUCCESS!
--> Running asgn1.test.17 (Test GET request for a proper response header with 200 (OK)) ... SUCCESS!
--> Running asgn1.test.18 (Test if server can handle an invalid method (POST)) ... SUCCESS!
--> Running asgn1.test.19 (Test if server can update files) ... failure!
++++ First 200 characters of standard error for test asgn1.test.19 are: ++++
bash: line 7: 19955 Terminated              ./httpserver 8019

++++ end ++++
---- Test feedback ----
Creates a small binary file on the server side and a large binary file on the client side. Send a PUT request using curl for the same resource name, however, the contents are that of a larger binary file. Use diff to verify the contents of the server side file compared to the original large binary.
---- end ----
--> Running asgn1.test.20 (Test for 400 error on bad resource (URI > 27 char)) ... SUCCESS!
--> Running asgn1.test.21 (Test for 403 error on resource without permission (PUT)) ... SUCCESS!
--> Running asgn1.test.22 (Test for 403 error on resource without permission (GET)) ... failure!
++++ First 200 characters of standard error for test asgn1.test.22 are: ++++
bash: line 7: 19980 Terminated              ./httpserver 8022

++++ end ++++
---- Test feedback ----
Create an empty file using touch on the server side with a valid name. Modify the permissions using chmod -r. Send a GET request using curl to the file created and capture the response code with curl's --write-out "%{http_code}\n" option. Verify with grep.
---- end ----
--> Running asgn1.test.23 (Test for 404 error for resource that doesn't exist) ... SUCCESS!
--> Running asgn1.test.24 (PUT request with delays throughout the message) ... unknown exception ... failure!
++++ First 200 characters of standard error for test asgn1.test.24 are: ++++
'utf-8' codec can't decode byte 0xfb in position 75: invalid start byte
Most likely what is happening is that the main program is printing binary data out. Another possible cause for this is that the result of the diff on binary files produced output that printed to stderr. In the case of the latter, this means the program also failed this test.
++++ end ++++
---- Test feedback ----
Create a binary file from /dev/urandom on the client side. Use printf to construct a PUT request.  Create the Content-Length header with printf """Content-Length: %s\r\n\r\n""" `stat -c "%s" <file>` where <file> is the name of binary file. Concatonate the request line, content-length header, and file contents and redirect (>) the output to another file. Send the request by redirecting (<) the file contents to ncat. Run ncat with the -d option which sends delays between each line transferred to the server as well as -i so that ncat terminates the connection.
---- end ----
"
